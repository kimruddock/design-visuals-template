@mixin animate($time, $label, $count:1, $timing:linear) {

	-webkit-animation-duration: $time;
	-moz-animation-duration: $time;
  animation-duration: $time;
  -webkit-animation-fill-mode: both;
  -moz-animation-fill-mode: both;
  animation-fill-mode: both;
  -webkit-animation-name: $label;
  -moz-animation-name: $label;
  animation-name: $label;
  -webkit-animation-iteration-count:$count;
  -moz-animation-iteration-count:$count;
  animation-iteration-count:$count;
  -webkit-animation-timing-function: $timing;
  -moz-animation-timing-function: $timing;
  animation-timing-function: $timing;

}

@mixin transition($transition-property, $transition-time, $method, $transition-delay:0) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;

    @if $transition-delay {
      -webkit-transition-delay: $transition-delay;
      -moz-transition-delay: $transition-delay;
      -transition-delay: $transition-delay;

    }
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

// generic transform
@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
   @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

// Media Queries

@mixin bp($width, $breakpoint) {
    @media only screen and ($width: $breakpoint + px ) { 
      @content; 
    }
}

@mixin heading-cross() {
        content:"+";
        color:#79ae26;
        position: absolute;
        top:-30px;
        left:-28px;
        font-size: 48px;
        font-weight: normal;
}



$random:random(10);
$percentage:percentage($random);

  @-webkit-keyframes shuffleColour {
  0% {
    fill: #000;
    
  }

  50% {
    fill:#79ae26;
  }

  100% {
    fill: #000;
   
  }
}

@keyframes shuffleColour {
   0% {
    fill: #000;
    
  }

  50% {
    fill:#79ae26;
  }

  100% {
    fill: #000;
   
  }
}




